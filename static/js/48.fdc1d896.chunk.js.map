{"version":3,"sources":["views/notifications/toaster/Toaster.js"],"names":["Toaster","useState","position","autohide","toasts","setToasts","setPosition","setAutohide","autohideValue","setAutohideValue","closeButton","setCloseButton","fade","setFade","toasters","reduce","toast","push","sm","lg","variant","className","id","checked","onChange","e","target","custom","htmlFor","type","value","Number","map","i","key","color","onClick","Object","keys","toasterKey","show"],"mappings":"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","file":"static/js/48.fdc1d896.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CToast,\r\n  CToastBody,\r\n  CToastHeader,\r\n  CToaster,\r\n  CForm,\r\n  CInput,\r\n  CInputCheckbox,\r\n  CButton,\r\n  CContainer,\r\n  CRow,\r\n  CCol,\r\n  CFormGroup,\r\n  CLabel\r\n} from '@coreui/react'\r\n\r\nconst Toaster = () => {\r\n\r\n  const positions = [\r\n    'static',\r\n    'top-left',\r\n    'top-center',\r\n    'top-right',\r\n    'top-full',\r\n    'bottom-left',\r\n    'bottom-center',\r\n    'bottom-right',\r\n    'bottom-full'\r\n  ]\r\n\r\n  const [toasts, setToasts] = useState([\r\n    { position: 'static'},\r\n    { position: 'static'},\r\n    { position: 'top-right', autohide: 3000 }\r\n  ])\r\n\r\n  const [position, setPosition] = useState('top-right')\r\n  const [autohide, setAutohide] = useState(true)\r\n  const [autohideValue, setAutohideValue] = useState(5000)\r\n  const [closeButton, setCloseButton] = useState(true)\r\n  const [fade, setFade] = useState(true)\r\n\r\n  const addToast = () => {\r\n    setToasts([\r\n      ...toasts, \r\n      { position, autohide: autohide && autohideValue, closeButton, fade }\r\n    ])\r\n  }\r\n\r\n\r\n  const toasters = (()=>{\r\n    return toasts.reduce((toasters, toast) => {\r\n      toasters[toast.position] = toasters[toast.position] || []\r\n      toasters[toast.position].push(toast)\r\n      return toasters\r\n    }, {})\r\n  })()\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n        Toasts.\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <CContainer>\r\n          <CRow>\r\n            <CCol sm=\"12\" lg=\"6\">\r\n              <CForm>\r\n                <h5>Add toast with following props:</h5>\r\n\r\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2 mt-4\">\r\n                  <CInputCheckbox\r\n                    id=\"autohide\"\r\n                    checked={autohide}\r\n                    onChange={e => { setAutohide(e.target.checked) }}\r\n                    custom\r\n                  />\r\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"autohide\">\r\n                    Autohide of the toast\r\n                  </CLabel>\r\n                </CFormGroup>\r\n                {\r\n                  autohide &&\r\n                  <CFormGroup className=\"my-2\">\r\n                    <CLabel htmlFor=\"ccyear\">Time to autohide</CLabel>\r\n                    <CInput\r\n                      type=\"number\"\r\n                      value={autohideValue}\r\n                      onChange={e => {\r\n                        setAutohideValue(Number(e.target.value))\r\n                      }}\r\n                    />\r\n                  </CFormGroup>\r\n                }\r\n\r\n                <CFormGroup className=\"my-2\">\r\n                  <CLabel htmlFor=\"ccyear\">Position</CLabel>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    value={position}\r\n                    onChange={e => {setPosition(e.target.value)}}\r\n                  >\r\n                    {\r\n                      positions.map((position, i)=>(\r\n                        <option key={i}>{position}</option>\r\n                      ))\r\n                    }\r\n                  </select>\r\n                </CFormGroup>\r\n\r\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\r\n                  <CInputCheckbox\r\n                    id=\"fade\"\r\n                    checked={fade}\r\n                    onChange={e => { setFade(e.target.checked) }}\r\n                    custom\r\n                  />\r\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"fade\">fade</CLabel>\r\n                </CFormGroup>\r\n\r\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\r\n                  <CInputCheckbox\r\n                    id=\"close\"\r\n                    custom\r\n                    checked={closeButton}\r\n                    onChange={e=> { setCloseButton(e.target.checked) }}\r\n                  />\r\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"close\">\r\n                    closeButton\r\n                  </CLabel>\r\n                </CFormGroup>\r\n\r\n                <CButton\r\n                  className=\"mr-1 w-25\"\r\n                  color=\"success\"\r\n                  onClick={addToast}\r\n                >\r\n                  Add toast\r\n                </CButton>\r\n\r\n              </CForm>\r\n            </CCol>\r\n            <CCol sm=\"12\" lg=\"6\">\r\n              {Object.keys(toasters).map((toasterKey) => (\r\n                <CToaster\r\n                  position={toasterKey}\r\n                  key={'toaster' + toasterKey}\r\n                >\r\n                  {\r\n                    toasters[toasterKey].map((toast, key)=>{\r\n                    return(\r\n                      <CToast\r\n                        key={'toast' + key}\r\n                        show={true}\r\n                        autohide={toast.autohide}\r\n                        fade={toast.fade}\r\n                      >\r\n                        <CToastHeader closeButton={toast.closeButton}>\r\n                          Toast title\r\n                        </CToastHeader>\r\n                        <CToastBody>\r\n                          {`This is a toast in ${toasterKey} positioned toaster number ${key + 1}.`}\r\n                        </CToastBody>\r\n                      </CToast>\r\n                    )\r\n                  })\r\n                  }\r\n                </CToaster>\r\n              ))}\r\n            </CCol>\r\n          </CRow>\r\n        </CContainer>\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Toaster\r\n"],"sourceRoot":""}