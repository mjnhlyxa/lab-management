{"version":3,"sources":["components/input/Input.js","components/button/Button.js","components/input/ListSelect.js","components/table/CreateTableRowModal.js","components/table/TableActions.js","components/table/TalbeLoadingSkeleton.js","components/input/Selectbox.js","components/table/columnFilters.js","components/table/Table.js"],"names":["Input","styled","input","height","space","color","layout","borderRadius","Button","button","Box","disabled","memo","Wrapper","ul","Item","li","selected","items","onChange","useState","selectedList","setSelectedList","map","item","key","value","isSelect","includes","onClick","newSelectedList","remove","n","selectItem","FooterButton","attrs","p","textAlign","flexGrow","hover","Header","Body","Footer","data","id","api","fields","list","addTableRow","onHide","setData","onInputChange","useCallback","e","fieldName","get","newData","as","flexDirection","field","type","name","caption","update","required","choices","listName","multichoices","Boolean","m","width","fontWeight","Field","backgroundColor","FilteredWrapper","Flex","Tag","SettingPopover","structure","onChangeStructure","setVisibility","onSave","options","setOptions","selectedOptions","setSelectedOptions","t","useTranslation","useEffect","ops","forEach","show","push","applyChange","newFields","newStruct","length","show_fields","join","Filtered","filterColumn","onDiscard","alignItems","mr","fontSize","TableActions","showModal","selectedRows","deleteTableRow","refreshData","onDiscardFilter","saveVisibleColumns","showPopover","setShowPopover","isSelecting","Object","keys","icon","MODAL_ID","CREATE_TABLE_DATA_MODAL","render","CreateTableRowModal","values","content","title","trigger","visible","onVisibleChange","placement","autoAdjustOverflow","mapDispatchToProps","connect","ActionsWrapper","TalbeLoadingSkeleton","mt","style","active","shape","round","paragraph","rows","Option","Select","Selectbox","defaultValue","rest","setValue","change","idx","val","TextFilter","onSubmit","FILTER_ID","EQUAL","filterType","setFilterType","nextValue","setNextValue","useMemo","START_WITH","stringOnly","END_WITH","CONTAIN","numberOnly","NOT_EQUAL","IN","NOT_IN","BETWEEN","NOT_BETWEEN","onSelectChange","Number","onNextInputChange","submit","makeFilterData","filterData","value1","split","el","trim","value2","isNumberType","FIELD_TYPE","FLOAT","INT","filter","ListFilter","onFilterTypeChange","onSelecting","StyledDataTable","DataTable","IconWrapper","Title","Text","initValue","setVal","STRING","TEXT","BOOLEAN","checked","DATE","TIME","DATETIME","Date","FILE","PASSWORD","FilterWrapper","ColumnNameWrapper","FaFilter","ColmnName","Content","sortable","onSort","EditRowBtn","Popover","editing","onEdit","onCancel","customStyles","contextMenu","header","minHeight","headRow","borderTop","borderBottom","headCells","paddingLeft","paddingRight","cells","estimateColumnWidth","isMultichoices","PAGE_SIZE_SETTING","fetchTableDefinition","fetchTableData","updateTableRow","searchInTable","sortByColumn","table","loading","fetchDefinitionState","fetchDataState","updateDataState","addDataState","searchState","deleteDataState","structureFromProps","dataFromProps","setStructure","editingRow","setEditRow","columns","setColumns","rowData","setRowData","pageIndex","setPageIndex","pageSize","setPageSize","setFilterColumn","setSelectedRows","setSortColumn","showSuccessMessage","RESPONSE_STATE","SUCCESSS","initColumns","cols","getSelectionColumn","getColumns","getActionColumn","optionDelete","cell","row","onSelectionRow","onSubmitEditedRow","onCancelEditing","deleteRow","editable","onSubmitFilter","onColumnSort","grow","selector","login_id","onRowValueChange","find","text","searchIdInList","console","log","message","notification","success","prev","omit","sortType","SORT_TYPE","ESC","DES","payload","sortInfo","JSON","stringify","searchInfo","struct","isSave","striped","actions","pagination","paginationServer","paginationPerPage","paginationDefaultPage","paginationRowsPerPageOptions","paginationTotalRows","total","onChangePage","totalRows","onChangeRowsPerPage","currentPage","fixedHeader","fixedHeaderScrollHeight"],"mappings":"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","file":"static/js/3.0286256d.chunk.js","sourcesContent":["import React, { useState, memo, useEffect, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Text, Box } from 'rebass';\r\nimport get from 'lodash/get';\r\nimport { space, color, layout, borderRadius } from 'styled-system';\r\n\r\nconst Input = styled.input`\r\n    height: ${({ height }) => (height ? height : '1.6rem')};\r\n    border-radius: 0.3rem;\r\n    margin: 0 0.25rem;\r\n    padding: 0.1rem 0.5rem;\r\n    width: 100%;\r\n    border: 1px solid #d6d6d6;\r\n    :focus {\r\n        outline: none;\r\n        border-color: #6e7a8e;\r\n    }\r\n    transition: border 500ms ease-out;\r\n`;\r\n\r\nexport default styled(Input)(space, color, layout, borderRadius);\r\n","import React, { useState, memo } from 'react';\r\nimport { Box } from 'rebass/styled-components';\r\nimport styled from 'styled-components';\r\n\r\nexport const Button = styled.button`\r\n    height: 1.6rem;\r\n    border-radius: 0.25rem;\r\n    margin: 0 0.25rem;\r\n    padding: 0.1rem 0.5rem;\r\n`;\r\n\r\nexport const IconButton = styled(Box)`\r\n    padding: 0 0.4rem;\r\n    background-color: ${({ disabled }) => (disabled ? '#bfbfbf' : '#6e798e')};\r\n    border-radius: 0.4rem;\r\n    color: white;\r\n    margin: 0 0.1rem;\r\n    :hover {\r\n        cursor: ${({ disabled }) => (disabled ? 'unset' : 'pointer')};\r\n    }\r\n`;\r\n\r\nexport default memo(Button);\r\n","import React, { useState, memo, useEffect, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Text, Box } from 'rebass';\r\nimport get from 'lodash/get';\r\nimport remove from 'lodash/remove';\r\nimport { space, color, layout, borderRadius } from 'styled-system';\r\n\r\nconst Wrapper = styled.ul`\r\n    position: relative;\r\n    list-style-type: none;\r\n    padding-left: 0;\r\n    padding: 0.2rem 0;\r\n`;\r\n\r\nconst Item = styled.li`\r\n    padding: 0.2rem 0.4rem;\r\n    margin: 0.2rem;\r\n    border-radius: 0.3rem;\r\n    :hover {\r\n        background: ${({ selected }) => (selected ? '#6e7a8e' : '#dadada')};\r\n        cursor: pointer;\r\n    }\r\n    background-color: ${({ selected }) => (selected ? '#6e7a8e' : '#efefef')};\r\n    color: ${({ selected }) => (selected ? 'white' : '#bebaba')};\r\n`;\r\n\r\nconst ListSelect = ({ items = [], selected = [], onChange }) => {\r\n    const [selectedList, setSelectedList] = useState(selected);\r\n\r\n    const selectItem = (item) => {\r\n        const isExist = selectedList.includes(item);\r\n        let newSelectedList;\r\n        if (isExist) {\r\n            remove(selectedList, (n) => n === item);\r\n            newSelectedList = [...selectedList];\r\n        } else {\r\n            newSelectedList = [...selectedList, item];\r\n        }\r\n        setSelectedList(newSelectedList);\r\n        onChange(newSelectedList);\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            {items.map((item) => {\r\n                const [key, value] = item;\r\n                const isSelect = selectedList.includes(key);\r\n                return (\r\n                    <Item key={key} selected={isSelect} onClick={() => selectItem(key)}>\r\n                        {value}\r\n                    </Item>\r\n                );\r\n            })}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default memo(styled(ListSelect)(space, color, layout, borderRadius));\r\n","import React, { useState, memo, useEffect, useCallback, useRef, useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport get from 'lodash/get';\r\nimport { Text, Box, Flex } from 'rebass';\r\nimport Button from 'components/button/Button';\r\nimport { Field } from 'components/table/Table';\r\n\r\nconst FooterButton = styled(Box).attrs(() => ({\r\n    p: '1rem 2rem',\r\n    textAlign: 'center',\r\n    flexGrow: 1,\r\n    color: 'white',\r\n}))`\r\n    :hover {\r\n        background-color: ${({ hover }) => hover};\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport const CreateTableRowModal = ({\r\n    Header,\r\n    Body,\r\n    Footer,\r\n    data: { id, api, fields, list = {}, addTableRow },\r\n    onHide,\r\n}) => {\r\n    const [data, setData] = useState({});\r\n\r\n    const onInputChange = useCallback((e, fieldName) => {\r\n        const value = get(e, 'target.value', e);\r\n        let newData = { ...data, [fieldName]: value };\r\n        setData(newData);\r\n    });\r\n\r\n    const onSubmit = () => {\r\n        addTableRow({ id, api, data });\r\n        onHide();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Header>\r\n                <Text as=\"p\">Add new record</Text>\r\n            </Header>\r\n            <Body>\r\n                <Flex flexDirection=\"column\">\r\n                    {fields.map((field) => {\r\n                        const { type, name, caption, update, required, choices, listName } = field;\r\n                        const multichoices = Boolean(choices && listName);\r\n                        return update ? (\r\n                            <Flex key={name} flexDirection=\"row\" m={2}>\r\n                                <Text as=\"p\" width=\"6rem\" fontWeight=\"bold\">\r\n                                    {caption}\r\n                                    {required ? '*' : ''}\r\n                                </Text>\r\n                                <Field\r\n                                    type={type}\r\n                                    onChange={(e) => onInputChange(e, name)}\r\n                                    list={list[listName]}\r\n                                    multichoices={multichoices}\r\n                                    height=\"2rem\"\r\n                                />\r\n                            </Flex>\r\n                        ) : null;\r\n                    })}\r\n                </Flex>\r\n            </Body>\r\n            <Footer>\r\n                <Flex flexDirection=\"row\" width=\"100%\">\r\n                    <FooterButton backgroundColor=\"#567bcc\" hover=\"#3862bf\" onClick={onSubmit}>\r\n                        CREATE\r\n                    </FooterButton>\r\n                    <FooterButton backgroundColor=\"#c1c3c3\" hover=\"#a7adad\" onClick={onHide}>\r\n                        CANCEL\r\n                    </FooterButton>\r\n                </Flex>\r\n            </Footer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(CreateTableRowModal);\r\n","import React, { useState, memo, useEffect, useCallback, useRef, useMemo } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\nimport styled from 'styled-components';\r\nimport { Text, Box, Flex } from 'rebass';\r\nimport { FaTrash, FaTimes, FaPlus, FaCog } from 'react-icons/fa';\r\nimport { IoIosRefresh } from 'react-icons/io';\r\nimport { OverlayTrigger, Dropdown } from 'react-bootstrap';\r\nimport { Button, Space, Popover } from 'antd';\r\nimport DatePicker from 'react-datepicker';\r\nimport get from 'lodash/get';\r\nimport omit from 'lodash/omit';\r\n\r\nimport { deleteTableRow, addTableRow, showModal, saveVisibleColumns } from 'actions/actions';\r\nimport Input from 'components/input/Input';\r\n// import { IconButton, Button } from 'components/button/Button';\r\n\r\nimport ListSelect from 'components/input/ListSelect';\r\n\r\nimport { MODAL_ID } from 'utils/constants';\r\nimport CreateTableRowModal from 'components/table/CreateTableRowModal';\r\n\r\nconst FilteredWrapper = styled(Flex)`\r\n    margin-right: 8px;\r\n    padding: 0.3rem 0.4rem;\r\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\r\n    border-radius: 0.3rem;\r\n`;\r\n\r\nconst Tag = styled(Box)`\r\n    background-color: rgb(255, 85, 0);\r\n    border-radius: 0.4rem;\r\n    font-size: 0.8rem;\r\n    padding: 0.1rem 0.4rem;\r\n    color: white;\r\n`;\r\n\r\nexport const SettingPopover = memo(({ structure, onChangeStructure, setVisibility, onSave }) => {\r\n    const [options, setOptions] = useState([]);\r\n    const [selectedOptions, setSelectedOptions] = useState([]);\r\n\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        const { fields = [] } = structure;\r\n        const ops = [];\r\n        const selected = [];\r\n        fields.forEach(({ name, caption, show }) => {\r\n            ops.push([name, caption]);\r\n            if (!!show) {\r\n                selected.push(name);\r\n            }\r\n        });\r\n        setOptions(ops);\r\n        setSelectedOptions(selected);\r\n    }, [structure]);\r\n\r\n    const onChangeSelection = (selected) => {\r\n        setSelectedOptions(selected);\r\n    };\r\n\r\n    const applyChange = () => {\r\n        const { fields } = structure;\r\n        const newFields = fields.map((field) => {\r\n            const { name } = field;\r\n            return {\r\n                ...field,\r\n                show: selectedOptions.includes(name),\r\n            };\r\n        });\r\n        const newStruct = {\r\n            ...structure,\r\n            fields: newFields,\r\n        };\r\n        onChangeStructure(newStruct, false);\r\n        setVisibility(false);\r\n    };\r\n\r\n    const saveChange = () => {\r\n        onSave({ show_fields: selectedOptions.join(',') });\r\n        applyChange();\r\n        setVisibility(false);\r\n    };\r\n\r\n    const onClose = () => {\r\n        setVisibility(false);\r\n    };\r\n\r\n    return (\r\n        <Box>\r\n            {options.length && <ListSelect items={options} selected={selectedOptions} onChange={onChangeSelection} />}\r\n            <Box>\r\n                <Button onClick={applyChange}>{t('common.button.label.apply')}</Button>\r\n                <Button onClick={saveChange}>{t('common.button.label.save')}</Button>\r\n                <Button onClick={onClose}>{t('common.button.label.cancel')}</Button>\r\n            </Box>\r\n        </Box>\r\n    );\r\n});\r\n\r\nexport const Filtered = memo(({ filterColumn, onDiscard, t }) => {\r\n    return (\r\n        <>\r\n            <FilteredWrapper flexDirection=\"row\" alignItems=\"center\">\r\n                <Text mr={2} fontSize=\"0.8rem\">\r\n                    {t('components.table.label.filteredBy')}\r\n                </Text>\r\n                <Tag>\r\n                    <Space>\r\n                        {filterColumn}\r\n                        <FaTimes onClick={onDiscard} />\r\n                    </Space>\r\n                </Tag>\r\n            </FilteredWrapper>\r\n        </>\r\n    );\r\n});\r\n\r\nconst popoverStyles = {\r\n    background: 'red',\r\n};\r\n\r\nexport const TableActions = memo(\r\n    ({\r\n        id,\r\n        api,\r\n        structure,\r\n        list,\r\n        filterColumn,\r\n        showModal,\r\n        addTableRow,\r\n        selectedRows,\r\n        deleteTableRow,\r\n        refreshData,\r\n        onDiscardFilter,\r\n        onChangeStructure,\r\n        saveVisibleColumns,\r\n    }) => {\r\n        const [showPopover, setShowPopover] = useState(false);\r\n\r\n        const { t } = useTranslation();\r\n        const onCreateData = () => {\r\n            showModal({\r\n                id: MODAL_ID.CREATE_TABLE_DATA_MODAL,\r\n                render: CreateTableRowModal,\r\n                data: {\r\n                    id,\r\n                    api,\r\n                    fields: structure.fields,\r\n                    list,\r\n                    addTableRow,\r\n                },\r\n            });\r\n        };\r\n\r\n        const isSelecting = () => {\r\n            return Object.keys(selectedRows).length > 0;\r\n        };\r\n\r\n        const deleteSelectedRow = () => {\r\n            if (isSelecting()) {\r\n                deleteTableRow({ id, api, data: Object.values(selectedRows) });\r\n            }\r\n        };\r\n\r\n        const saveColumnsSetting = (data) => {\r\n            saveVisibleColumns({ id, api, data });\r\n        };\r\n\r\n        const handlePopoverVisibleChange = (visible) => {\r\n            setShowPopover(visible);\r\n        };\r\n\r\n        return (\r\n            <Flex flexDirection=\"row\">\r\n                <Space>\r\n                    {filterColumn && <Filtered filterColumn={filterColumn} onDiscard={onDiscardFilter} t={t} />}\r\n                    <Button type=\"primary\" onClick={refreshData} icon={<IoIosRefresh />} />\r\n                    <Button type=\"primary\" onClick={onCreateData} icon={<FaPlus />} />\r\n                    <Button type=\"primary\" onClick={deleteSelectedRow} disabled={!isSelecting()} icon={<FaTrash />} />\r\n                    <Popover\r\n                        content={\r\n                            <SettingPopover\r\n                                setVisibility={setShowPopover}\r\n                                structure={structure}\r\n                                onChangeStructure={onChangeStructure}\r\n                                onSave={saveColumnsSetting}\r\n                            />\r\n                        }\r\n                        title={t('components.table.label.filteredBy')}\r\n                        trigger=\"click\"\r\n                        visible={showPopover}\r\n                        onVisibleChange={handlePopoverVisibleChange}\r\n                        placement=\"leftTop\"\r\n                        autoAdjustOverflow>\r\n                        <Button type=\"primary\" icon={<FaCog />} />\r\n                    </Popover>\r\n                </Space>\r\n            </Flex>\r\n        );\r\n    },\r\n);\r\n\r\nconst mapDispatchToProps = {\r\n    showModal,\r\n    addTableRow,\r\n    deleteTableRow,\r\n    saveVisibleColumns,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(TableActions);\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Box, Flex } from 'rebass/styled-components';\r\nimport { Skeleton, Space } from 'antd';\r\n\r\nconst ActionsWrapper = styled(Box)`\r\n    position: absolute;\r\n    right: 1rem;\r\n`;\r\n\r\nexport const TalbeLoadingSkeleton = () => {\r\n    return (\r\n        <>\r\n            <Flex flexDirection=\"row\" mt={4}>\r\n                <Skeleton.Input style={{ width: 200 }} active />\r\n                <ActionsWrapper>\r\n                    <Space>\r\n                        <Skeleton.Button shape=\"round\" />\r\n                        <Skeleton.Button shape=\"round\" />\r\n                        <Skeleton.Button shape=\"round\" />\r\n                        <Skeleton.Button shape=\"round\" />\r\n                    </Space>\r\n                </ActionsWrapper>\r\n            </Flex>\r\n            <br />\r\n            <br />\r\n            <Skeleton\r\n                title={false}\r\n                round\r\n                paragraph={{ rows: 6, width: ['100%', '100%', '100%', '100%', '100%', '100%'] }}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TalbeLoadingSkeleton;\r\n","import React, { useState, memo, useEffect, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Text, Box } from 'rebass';\r\nimport { Select } from 'antd';\r\nimport { space, color, layout, borderRadius } from 'styled-system';\r\nimport get from 'lodash/get';\r\n\r\nconst { Option } = Select;\r\n\r\nexport const Selectbox = memo(({ options, defaultValue, onChange, ...rest }) => {\r\n    const [value, setValue] = useState(defaultValue);\r\n    const change = useCallback((idx, { value: val }) => {\r\n        setValue(val);\r\n        onChange(val);\r\n    }, []);\r\n\r\n    return (\r\n        <Select value={value} onChange={change} {...rest}>\r\n            {options.map(({ id, value }, idx) => (\r\n                <Option key={id} value={id}>\r\n                    {value}\r\n                </Option>\r\n            ))}\r\n        </Select>\r\n    );\r\n});\r\n\r\nexport default Selectbox;\r\n","import React, { useState, memo, useEffect, useCallback, useMemo, useRef } from 'react';\r\nimport { Text, Box, Flex } from 'rebass';\r\nimport get from 'lodash/get';\r\nimport { Button, Input, Space } from 'antd';\r\n\r\nimport { FIELD_TYPE, FILTER_ID } from 'utils/constants';\r\nimport Selectbox from 'components/input/Selectbox';\r\nimport ListSelect from 'components/input/ListSelect';\r\n\r\nexport const TextFilter = memo(({ name, onSubmit, type }) => {\r\n    const [filterType, setFilterType] = useState(FILTER_ID.EQUAL);\r\n    const [value, setValue] = useState('');\r\n    const [nextValue, setNextValue] = useState('');\r\n\r\n    const options = useMemo(\r\n        () => [\r\n            {\r\n                id: FILTER_ID.START_WITH,\r\n                value: 'Start with',\r\n                stringOnly: true,\r\n            },\r\n            {\r\n                id: FILTER_ID.END_WITH,\r\n                value: 'End with',\r\n                stringOnly: true,\r\n            },\r\n            {\r\n                id: FILTER_ID.CONTAIN,\r\n                value: 'Contain',\r\n                stringOnly: true,\r\n            },\r\n            {\r\n                id: FILTER_ID.EQUAL,\r\n                value: 'Equal',\r\n                numberOnly: true,\r\n                stringOnly: true,\r\n            },\r\n            {\r\n                id: FILTER_ID.NOT_EQUAL,\r\n                value: 'Not equal',\r\n                numberOnly: true,\r\n                stringOnly: true,\r\n            },\r\n            {\r\n                id: FILTER_ID.IN,\r\n                value: 'In',\r\n            },\r\n            {\r\n                id: FILTER_ID.NOT_IN,\r\n                value: 'Not in',\r\n            },\r\n            {\r\n                id: FILTER_ID.BETWEEN,\r\n                value: 'Between',\r\n                numberOnly: true,\r\n            },\r\n            {\r\n                id: FILTER_ID.NOT_BETWEEN,\r\n                value: 'Not between',\r\n                numberOnly: true,\r\n            },\r\n        ],\r\n        [],\r\n    );\r\n\r\n    const onSelectChange = useCallback((value) => {\r\n        setFilterType(Number(value));\r\n    }, []);\r\n\r\n    const onInputChange = useCallback((e) => {\r\n        const val = get(e, 'target.value');\r\n        setValue(val);\r\n    }, []);\r\n\r\n    const onNextInputChange = useCallback((e) => {\r\n        const val = get(e, 'target.value');\r\n        setNextValue(val);\r\n    }, []);\r\n\r\n    const submit = useCallback(() => {\r\n        onSubmit(makeFilterData());\r\n    }, [value, nextValue, filterType]);\r\n\r\n    const makeFilterData = () => {\r\n        let filterData = {};\r\n        switch (filterType) {\r\n            case FILTER_ID.EQUAL:\r\n            case FILTER_ID.NOT_EQUAL:\r\n            case FILTER_ID.CONTAIN:\r\n            case FILTER_ID.START_WITH:\r\n            case FILTER_ID.END_WITH:\r\n                filterData = {\r\n                    value1: value,\r\n                    type: filterType,\r\n                };\r\n                break;\r\n            case FILTER_ID.IN:\r\n            case FILTER_ID.NOT_IN:\r\n                filterData = {\r\n                    values: value.split(',').map((el) => el.trim()),\r\n                    type: filterType,\r\n                };\r\n                break;\r\n            case FILTER_ID.BETWEEN:\r\n            case FILTER_ID.NOT_BETWEEN:\r\n                filterData = {\r\n                    value1: value,\r\n                    value2: nextValue,\r\n                    type: filterType === FILTER_ID.BETWEEN ? FILTER_ID.IN : FILTER_ID.NOT_IN,\r\n                    values: null,\r\n                };\r\n            default:\r\n                break;\r\n        }\r\n        return {\r\n            [name]: {\r\n                name: name,\r\n                ...filterData,\r\n            },\r\n        };\r\n    };\r\n\r\n    const isNumberType = () => {\r\n        return type === FIELD_TYPE.FLOAT || type === FIELD_TYPE.INT;\r\n    };\r\n\r\n    const getOptions = () =>\r\n        isNumberType() ? options.filter((el) => el.numberOnly) : options.filter((el) => el.stringOnly);\r\n    const isBetweenFilter = () => filterType === FILTER_ID.BETWEEN || filterType === FILTER_ID.NOT_BETWEEN;\r\n\r\n    return (\r\n        <Flex flexDirection=\"row\">\r\n            <Space>\r\n                <Selectbox\r\n                    options={getOptions()}\r\n                    defaultValue={filterType}\r\n                    onChange={onSelectChange}\r\n                    style={{ width: 100 }}\r\n                />\r\n                <Input type={isNumberType() ? 'number' : 'text'} onChange={onInputChange} />\r\n                {isBetweenFilter() && (\r\n                    <>\r\n                        <Box>{'>'}</Box>\r\n                        <Input type={isNumberType() ? 'number' : 'text'} onChange={onNextInputChange} />\r\n                    </>\r\n                )}\r\n\r\n                <Button onClick={submit}>Search</Button>\r\n            </Space>\r\n        </Flex>\r\n    );\r\n});\r\nexport const ListFilter = memo(({ name, list, onSubmit, type }) => {\r\n    const [filterType, setFilterType] = useState(FILTER_ID.IN);\r\n    const [value, setValue] = useState('');\r\n\r\n    const options = useMemo(\r\n        () => [\r\n            // {\r\n            //     id: FILTER_ID.EQUAL,\r\n            //     value: 'Equal',\r\n            // },\r\n            // {\r\n            //     id: FILTER_ID.NOT_EQUAL,\r\n            //     value: 'Not equal',\r\n            // },\r\n            {\r\n                id: FILTER_ID.IN,\r\n                value: 'In',\r\n            },\r\n        ],\r\n        [],\r\n    );\r\n\r\n    const onFilterTypeChange = useCallback((value) => {\r\n        setFilterType(Number(value));\r\n    }, []);\r\n\r\n    const onSelecting = useCallback((selectedList) => {\r\n        setValue(selectedList);\r\n    }, []);\r\n\r\n    const submit = useCallback(() => {\r\n        onSubmit(makeFilterData());\r\n    }, [value, filterType]);\r\n\r\n    const makeFilterData = () => {\r\n        return {\r\n            [name]: {\r\n                name: name,\r\n                type: filterType,\r\n                values: value,\r\n                value1: null,\r\n                value2: null,\r\n            },\r\n        };\r\n    };\r\n\r\n    return (\r\n        <Flex flexDirection=\"row\" alignItems=\"baseline\">\r\n            <Selectbox\r\n                options={options}\r\n                defaultValue={filterType}\r\n                onChange={onFilterTypeChange}\r\n                style={{ width: 100 }}\r\n            />\r\n            <ListSelect items={list} onChange={onSelecting} />\r\n            <Button onClick={submit}>Search</Button>\r\n        </Flex>\r\n    );\r\n});\r\n","import React, { useState, memo, useEffect, useCallback, useRef, useMemo } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport DataTable from 'react-data-table-component';\r\nimport { Text, Box, Flex } from 'rebass';\r\nimport { notification, Tag, Button, Popover } from 'antd';\r\nimport { FaSort, FaPencilAlt, FaBan, FaTrashAlt, FaCheck, FaFilter, FaTimes, FaPlus, FaCog } from 'react-icons/fa';\r\nimport { IoIosRefresh } from 'react-icons/io';\r\nimport DatePicker from 'react-datepicker';\r\nimport get from 'lodash/get';\r\nimport omit from 'lodash/omit';\r\n\r\nimport {\r\n    fetchTableDefinition,\r\n    fetchTableData,\r\n    updateTableRow,\r\n    deleteTableRow,\r\n    searchInTable,\r\n    addTableRow,\r\n    showModal,\r\n    sortByColumn,\r\n} from 'actions/actions';\r\nimport Input from 'components/input/Input';\r\nimport { IconButton } from 'components/button/Button';\r\nimport ListSelect from 'components/input/ListSelect';\r\nimport TableActions from 'components/table/TableActions';\r\nimport TalbeLoadingSkeleton from 'components/table/TalbeLoadingSkeleton';\r\nimport { FIELD_TYPE, MODAL_ID, RESPONSE_STATE, SORT_TYPE } from 'utils/constants';\r\nimport { TextFilter, ListFilter } from 'components/table/columnFilters';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst StyledDataTable = styled(DataTable)`\r\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\r\n    padding: 0.5rem;\r\n    border-radius: 0.5rem;\r\n    .rdt_TableBody::-webkit-scrollbar-track {\r\n        -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n        background-color: #f5f5f5;\r\n    }\r\n\r\n    .rdt_TableBody::-webkit-scrollbar {\r\n        width: 6px;\r\n        background-color: #f5f5f5;\r\n    }\r\n\r\n    .rdt_TableBody::-webkit-scrollbar-thumb {\r\n        background-color: #6e7a8e;\r\n    }\r\n`;\r\n\r\nconst IconWrapper = styled(Box).attrs(() => ({\r\n    p: 2,\r\n}))`\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Title = styled(Text)`\r\n    width: fit-content;\r\n`;\r\n\r\nexport const Field = memo(({ type, value: initValue, onChange, list, multichoices, height = '1.6rem' }) => {\r\n    const [val, setVal] = useState(initValue);\r\n    const change = (e) => {\r\n        const value = get(e, 'target.value', e);\r\n        setVal(value);\r\n        onChange(value);\r\n    };\r\n\r\n    if (multichoices) {\r\n        return <ListSelect items={list} selected={initValue} onChange={onChange} />;\r\n        // const mappingFields = list[listName];\r\n    }\r\n\r\n    switch (type) {\r\n        case FIELD_TYPE.STRING:\r\n            return <Input type=\"text\" value={val} onChange={change} height={height} />;\r\n        case FIELD_TYPE.FLOAT:\r\n            return <Input type=\"number\" value={val} onChange={change} height={height} />;\r\n        case FIELD_TYPE.INT:\r\n            return <Input type=\"number\" value={val} onChange={change} height={height} />;\r\n        case FIELD_TYPE.TEXT:\r\n            return <Input type=\"text\" value={val} onChange={change} height={height} />;\r\n        case FIELD_TYPE.BOOLEAN:\r\n            return <Input type=\"checkbox\" checked={val} onChange={change} height={height} />;\r\n        case FIELD_TYPE.DATE:\r\n            return <DatePicker selected={val ? new Date(val) : new Date()} onChange={change} />;\r\n        case FIELD_TYPE.TIME:\r\n            return <DatePicker selected={val ? new Date(val) : new Date()} onChange={change} />;\r\n        case FIELD_TYPE.DATETIME:\r\n            return <DatePicker selected={val ? new Date(val) : new Date()} onChange={change} />;\r\n        case FIELD_TYPE.FILE:\r\n            return <Input type=\"text\" value={val} onChange={change} height={height} />;\r\n        case FIELD_TYPE.PASSWORD:\r\n            return <Input type=\"password\" value={val} onChange={change} height={height} />;\r\n    }\r\n});\r\n\r\nconst FilterWrapper = styled(Box).attrs(() => ({\r\n    p: 0,\r\n}))`\r\n    cursor: pointer;\r\n`;\r\n\r\nconst FilterIcon = styled(FaFilter)`\r\n    width: 0.7rem;\r\n`;\r\n\r\nconst ColumnNameWrapper = styled(Flex)`\r\n    font-size: 0.8rem;\r\n    font-weight: bold;\r\n    color: #1990ff;\r\n    &:hover {\r\n        color: #469ff2;\r\n    }\r\n`;\r\n\r\nconst ColmnName = memo(({ name, value, list, type, onSubmit, multichoices, sortable, onSort }) => {\r\n    const [showPopover, setShowPopover] = useState(false);\r\n\r\n    const { t } = useTranslation();\r\n    const handlePopoverVisibleChange = (visible) => {\r\n        setShowPopover(visible);\r\n    };\r\n\r\n    let Content;\r\n\r\n    switch (type) {\r\n        case FIELD_TYPE.STRING:\r\n            Content = TextFilter;\r\n            break;\r\n        case FIELD_TYPE.INT:\r\n        case FIELD_TYPE.FLOAT:\r\n            Content = TextFilter;\r\n            break;\r\n        default:\r\n            Content = TextFilter;\r\n            break;\r\n    }\r\n\r\n    if (multichoices) {\r\n        Content = ListFilter;\r\n    }\r\n    return (\r\n        <ColumnNameWrapper flexDirection=\"row\" alignItems=\"center\">\r\n            <Text as=\"span\" color=\"black\" mr={1}>\r\n                {value}\r\n            </Text>\r\n            {sortable && <FaSort color=\"#b5b5b5\" onClick={() => onSort(name)} />}\r\n            <FilterWrapper>\r\n                <Popover\r\n                    title={\r\n                        <Text as=\"p\">\r\n                            {t('components.table.label.filterBy')} <Text as=\"strong\">{name}</Text>\r\n                        </Text>\r\n                    }\r\n                    content={<Content name={name} onSubmit={onSubmit} type={type} list={list} />}\r\n                    trigger=\"click\"\r\n                    visible={showPopover}\r\n                    onVisibleChange={handlePopoverVisibleChange}>\r\n                    <Box width=\"0.7rem\">\r\n                        <FaFilter />\r\n                    </Box>\r\n                </Popover>\r\n            </FilterWrapper>\r\n        </ColumnNameWrapper>\r\n    );\r\n});\r\n\r\nconst StyledPopover = styled(Popover)`\r\n    min-width: 24.5rem;\r\n    padding: 1rem;\r\n`;\r\n\r\nconst EditRowBtn = memo(({ editing, onEdit, onCancel, onSubmit }) => {\r\n    return editing ? (\r\n        <>\r\n            <IconWrapper onClick={onSubmit} color=\"#62c707\">\r\n                <FaCheck />\r\n            </IconWrapper>\r\n            <IconWrapper onClick={onCancel} color=\"#ff8300\">\r\n                <FaBan />\r\n            </IconWrapper>\r\n        </>\r\n    ) : (\r\n        <IconWrapper onClick={onEdit} color=\"#1990ff\">\r\n            <FaPencilAlt />\r\n        </IconWrapper>\r\n    );\r\n});\r\n\r\nconst searchIdInList = (list, id) => {\r\n    const item = list.find((item) => item[0] === id) || [];\r\n    const [, text] = item;\r\n    return {\r\n        text,\r\n        item,\r\n    };\r\n};\r\n\r\nconst customStyles = {\r\n    contextMenu: {\r\n        style: {\r\n            backgroundColor: 'white',\r\n        },\r\n    },\r\n    header: {\r\n        style: {\r\n            minHeight: '3.5rem',\r\n            // backgroundColor: '#636f83',\r\n        },\r\n    },\r\n    headRow: {\r\n        style: {\r\n            borderTop: '1px solid #c5c5c5',\r\n            borderBottom: '1px solid #c5c5c5',\r\n            // marginBottom: '0.5rem',\r\n            // borderRadius: '0.3rem',\r\n            // boxShadow: '0 3px 5px 0 rgba(0, 0, 0, 0.2)',\r\n            backgroundColor: '#fafafa',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            paddingLeft: '0.5rem',\r\n            paddingRight: '0.5rem',\r\n            // border: '1px solid #cccccc',\r\n            // margin: '0.5rem 0',\r\n            // borderRadius: '0.5rem',\r\n            '&:not(:last-of-type)': {\r\n                // borderRight: '1px solid #c5c5c5',\r\n            },\r\n        },\r\n    },\r\n    cells: {\r\n        style: {\r\n            paddingLeft: '0.5rem',\r\n            paddingRight: '0.5rem',\r\n            borderBottom: '1px solid #c5c5c5',\r\n            color: '#474747',\r\n            '&:not(:last-of-type)': {\r\n                // borderLeft: '1px solid #c5c5c5',\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\nconst estimateColumnWidth = (type, isMultichoices) => {\r\n    if (isMultichoices) {\r\n        return 3;\r\n    }\r\n    switch (type) {\r\n        case FIELD_TYPE.STRING:\r\n        case FIELD_TYPE.PASSWORD:\r\n        case FIELD_TYPE.TEXT:\r\n            return 2;\r\n        case FIELD_TYPE.FLOAT:\r\n        case FIELD_TYPE.INT:\r\n        case FIELD_TYPE.BOOLEAN:\r\n            return 1;\r\n        case FIELD_TYPE.DATE:\r\n        case FIELD_TYPE.TIME:\r\n        case FIELD_TYPE.DATETIME:\r\n        case FIELD_TYPE.FILE:\r\n            return 3;\r\n    }\r\n};\r\n\r\nconst PAGE_SIZE = 5;\r\nconst PAGE_SIZE_SETTING = [5, 10, 20];\r\n\r\nexport const Table = ({\r\n    id,\r\n    api,\r\n    title,\r\n    fetchTableDefinition,\r\n    fetchTableData,\r\n    updateTableRow,\r\n    deleteTableRow,\r\n    loading,\r\n    structure: structureFromProps,\r\n    data: dataFromProps,\r\n    fetchDefinitionState,\r\n    fetchDataState,\r\n    updateDataState,\r\n    addDataState,\r\n    searchState,\r\n    searchInTable,\r\n    deleteDataState,\r\n    showModal,\r\n    sortByColumn,\r\n}) => {\r\n    const [structure, setStructure] = useState(structureFromProps[id]);\r\n    const [data, setData] = useState(dataFromProps[id]);\r\n    const [editingRow, setEditRow] = useState(-1);\r\n    const [columns, setColumns] = useState([]);\r\n    const [rowData, setRowData] = useState({});\r\n    const [pageIndex, setPageIndex] = useState(1);\r\n    const [pageSize, setPageSize] = useState(PAGE_SIZE);\r\n    const [filterColumn, setFilterColumn] = useState();\r\n    const [selectedRows, setSelectedRows] = useState({});\r\n    const [sortColumn, setSortColumn] = useState({});\r\n\r\n    useEffect(() => {\r\n        fetchTableDefinition({ api, id });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // if (fetchDefinitionState === RESPONSE_STATE.SUCCESSS) {\r\n            setStructure(structureFromProps[id]);\r\n            refreshData();\r\n            showSuccessMessage('Fetch table definition success!');\r\n        // }\r\n    }, [structureFromProps]);\r\n\r\n    useEffect(() => {\r\n        if (fetchDataState === RESPONSE_STATE.SUCCESSS || searchState === RESPONSE_STATE.SUCCESSS) {\r\n            setData(dataFromProps[id]);\r\n        }\r\n    }, [fetchDataState, searchState]);\r\n\r\n    useEffect(() => {\r\n        if (structure && data) {\r\n            initColumns();\r\n        }\r\n    }, [structure, data, editingRow, selectedRows]);\r\n\r\n    useEffect(() => {\r\n        if (\r\n            updateDataState === RESPONSE_STATE.SUCCESSS ||\r\n            addDataState === RESPONSE_STATE.SUCCESSS ||\r\n            deleteDataState === RESPONSE_STATE.SUCCESSS\r\n        ) {\r\n            setSelectedRows({});\r\n            refreshData();\r\n            showSuccessMessage();\r\n        }\r\n    }, [updateDataState, addDataState, deleteDataState]);\r\n\r\n    const initColumns = () => {\r\n        const cols = [...getSelectionColumn(), ...getColumns(), ...getActionColumn()];\r\n        setColumns(cols);\r\n    };\r\n\r\n    const getSelectionColumn = () => {\r\n        const { optionDelete } = structure;\r\n        const cols = [];\r\n        // if support row selection\r\n        if (optionDelete) {\r\n            cols.push({\r\n                id: 'selection',\r\n                name: '',\r\n                sortable: false,\r\n                width: '3rem',\r\n                cell: (row) => {\r\n                    return (\r\n                        <Input\r\n                            type=\"checkbox\"\r\n                            checked={Boolean(selectedRows[row.id])}\r\n                            onChange={() => onSelectionRow(row)}\r\n                        />\r\n                    );\r\n                },\r\n            });\r\n        }\r\n        return cols;\r\n    };\r\n\r\n    const getActionColumn = () => {\r\n        return [\r\n            {\r\n                id: 'action',\r\n                name: '',\r\n                sortable: false,\r\n                cell: (row) => {\r\n                    const { id } = row;\r\n                    return (\r\n                        <>\r\n                            <EditRowBtn\r\n                                editing={editingRow === id}\r\n                                onEdit={() => {\r\n                                    setEditRow(id);\r\n                                    setRowData({});\r\n                                }}\r\n                                onSubmit={onSubmitEditedRow}\r\n                                onCancel={onCancelEditing}\r\n                            />\r\n                            <IconWrapper onClick={() => deleteRow(row)} color=\"#dc3544\">\r\n                                <FaTrashAlt />\r\n                            </IconWrapper>\r\n                        </>\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    };\r\n\r\n    const getColumns = () => {\r\n        const { fields = [] } = structure;\r\n        const columns = [];\r\n        fields.forEach(({ type, name, caption, sortable, choices, listName, editable, show }) => {\r\n            const isMultichoices = Boolean(listName && choices);\r\n            const list = get(data, 'list', {})[listName];\r\n            if (!show) {\r\n                return;\r\n            }\r\n            columns.push({\r\n                id: name,\r\n                name: (\r\n                    <ColmnName\r\n                        value={caption}\r\n                        type={type}\r\n                        name={name}\r\n                        list={list}\r\n                        multichoices={isMultichoices}\r\n                        sortable={sortable}\r\n                        onSubmit={onSubmitFilter}\r\n                        onSort={onColumnSort}\r\n                    />\r\n                ),\r\n                grow: estimateColumnWidth(type, isMultichoices),\r\n                sortable: false,\r\n                selector: name,\r\n                cell: (row) => {\r\n                    const value = row[name];\r\n                    const { id, login_id } = row;\r\n                    const isEditing = id === editingRow;\r\n                    if (isEditing && editable) {\r\n                        return (\r\n                            <Field\r\n                                type={type}\r\n                                value={value}\r\n                                onChange={(e) => onRowValueChange(e, row, name)}\r\n                                list={data.list[listName]}\r\n                                multichoices={isMultichoices}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (isMultichoices) {\r\n                        return (\r\n                            <Flex flexDirection=\"column\" p={2}>\r\n                                {value.map((el) => {\r\n                                    const { text, item } = searchIdInList(list, el);\r\n                                    return (\r\n                                        <Text as=\"p\" key={text}>\r\n                                            - {text}\r\n                                        </Text>\r\n                                    );\r\n                                })}\r\n                            </Flex>\r\n                        );\r\n                    }\r\n                    return <Text>{value}</Text>;\r\n                },\r\n            });\r\n        });\r\n        return columns;\r\n    };\r\n\r\n    console.log('render table');\r\n\r\n    const showSuccessMessage = (message) => {\r\n        notification.success({\r\n            message,\r\n            placement: 'bottomRight',\r\n        });\r\n    };\r\n\r\n    const showErrorMessage = (message) => {\r\n        notification.error({\r\n            message,\r\n            placement: 'bottomRight',\r\n        });\r\n    };\r\n\r\n    const refreshData = useCallback(() => {\r\n        fetchTableData({ id, api, pageSize, pageIndex });\r\n    }, [pageSize, pageIndex]);\r\n\r\n    const onSelectionRow = (row) => {\r\n        setSelectedRows((prev) => {\r\n            const { id } = row;\r\n            let newSelectedRows;\r\n            if (prev[id]) {\r\n                newSelectedRows = omit(prev, [id]);\r\n            } else {\r\n                newSelectedRows = { ...prev, [id]: row };\r\n            }\r\n            return newSelectedRows;\r\n        });\r\n    };\r\n\r\n    const onSubmitEditedRow = useCallback(() => {\r\n        setRowData((data) => {\r\n            updateTableRow({ id, api, data });\r\n            return data;\r\n        });\r\n        setEditRow(-1);\r\n    }, [rowData]);\r\n\r\n    const onCancelEditing = useCallback(() => {\r\n        setEditRow(-1);\r\n    }, []);\r\n\r\n    const deleteRow = (data) => {\r\n        deleteTableRow({ api, data });\r\n    };\r\n\r\n    const onRowValueChange = (e, row, fieldName) => {\r\n        const value = get(e, 'target.value', e);\r\n        console.log(`set field ${fieldName} with value ${value}`);\r\n        setRowData((prev) => {\r\n            return {\r\n                ...row,\r\n                ...prev,\r\n                [fieldName]: value,\r\n            };\r\n        });\r\n    };\r\n\r\n    const onColumnSort = (name) => {\r\n        setSortColumn((prev) => {\r\n            const sortType = prev[name] != SORT_TYPE.ESC ? SORT_TYPE.ESC : SORT_TYPE.DES;\r\n            const payload = {\r\n                pageSize,\r\n                pageIndex,\r\n                sortInfo: JSON.stringify([{ name: name, type: sortType }]),\r\n            };\r\n            sortByColumn({ api, data: payload });\r\n            return { [name]: sortType };\r\n        });\r\n    };\r\n\r\n    const onSubmitFilter = (filter) => {\r\n        const payload = {\r\n            pageSize,\r\n            pageIndex: 1,\r\n            searchInfo: filter,\r\n        };\r\n        console.log(payload);\r\n        setFilterColumn(Object.keys(filter)[0]);\r\n        searchInTable({ api, data: payload });\r\n    };\r\n\r\n    const onDiscardFilter = useCallback(() => {\r\n        refreshData();\r\n        setFilterColumn('');\r\n    }, [pageSize, pageIndex]);\r\n\r\n    const onChangeStructure = useCallback((struct, isSave) => {\r\n        setStructure(struct);\r\n    }, []);\r\n\r\n    const onSort = (column, sortDirection) => {\r\n        console.log();\r\n    };\r\n\r\n    const onChangeRowsPerPage = (pageSize, currentPage) => {\r\n        console.log(pageSize);\r\n        console.log(currentPage);\r\n        setPageSize(pageSize);\r\n        setPageIndex(currentPage);\r\n        fetchTableData({ id, api, pageSize, pageIndex: currentPage });\r\n    };\r\n\r\n    const onChangePage = (pageIndex, totalRows) => {\r\n        console.log(pageIndex);\r\n        console.log(totalRows);\r\n        setPageIndex(pageIndex);\r\n        fetchTableData({ id, api, pageSize, pageIndex });\r\n    };\r\n\r\n    if (loading) {\r\n        return <TalbeLoadingSkeleton />;\r\n    }\r\n\r\n    if (structure && data) {\r\n        console.log('done')\r\n        return (\r\n            <StyledDataTable\r\n                title={<Title>{title}</Title>}\r\n                striped\r\n                actions={\r\n                    <TableActions\r\n                        id={id}\r\n                        api={api}\r\n                        structure={structure}\r\n                        list={data.list}\r\n                        filterColumn={filterColumn}\r\n                        selectedRows={selectedRows}\r\n                        refreshData={refreshData}\r\n                        onDiscardFilter={onDiscardFilter}\r\n                        onChangeStructure={onChangeStructure}\r\n                    />\r\n                }\r\n                // highlightOnHover\r\n                columns={columns}\r\n                data={data.data}\r\n                pagination\r\n                paginationServer\r\n                paginationPerPage={pageSize}\r\n                paginationDefaultPage={pageIndex}\r\n                paginationRowsPerPageOptions={PAGE_SIZE_SETTING}\r\n                paginationTotalRows={data.total}\r\n                onChangePage={onChangePage}\r\n                onChangeRowsPerPage={onChangeRowsPerPage}\r\n                customStyles={customStyles}\r\n                fixedHeader\r\n                fixedHeaderScrollHeight=\"26rem\"\r\n            />\r\n        );\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nconst mapStateToProps = ({\r\n    table: {\r\n        loading,\r\n        structure,\r\n        data,\r\n        fetchDefinitionState,\r\n        fetchDataState,\r\n        updateDataState,\r\n        addDataState,\r\n        searchState,\r\n        deleteDataState,\r\n    },\r\n}) => {\r\n    return {\r\n        loading,\r\n        structure,\r\n        data,\r\n        fetchDefinitionState,\r\n        fetchDataState,\r\n        updateDataState,\r\n        addDataState,\r\n        searchState,\r\n        deleteDataState,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchTableDefinition,\r\n    fetchTableData,\r\n    updateTableRow,\r\n    deleteTableRow,\r\n    searchInTable,\r\n    showModal,\r\n    sortByColumn,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(memo(Table));\r\n"],"sourceRoot":""}